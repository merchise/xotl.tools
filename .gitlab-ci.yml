---
stages:
  - pre-check
  - mypy
  - test
  - check
  - build
  - publish
  - clean up

.x-when-mrs-or-stable: &when-merge-requests-or-stable
  refs:
    - main
    - /^releases-2/
    - merge_requests
  changes:
    - docs/**/*.rst
    - docs/**/*.py
    - xotl/tools/**/*.py
    - tests/**/*.py
    - setup.py
    - setup.cfg
    - tox.ini
    - .gitlab-ci.yml

.x-when-mrs: &when-merge-requests
  refs:
    - merge_requests
  changes:
    - docs/**/*.rst
    - docs/**/*.py
    - xotl/tools/**/*.py
    - tests/**/*.py
    - setup.py
    - setup.cfg
    - tox.ini
    - .gitlab-ci.yml


.x-when-stable: &when-stable-branches
  refs:
    - main
    - /^releases-2
  changes:
    - docs/**/*.rst
    - docs/**/*.py
    - xotl/tools/**/*.py
    - tests/**/*.py
    - setup.py
    - setup.cfg
    - tox.ini
    - .gitlab-ci.yml


check flake8 and black:
  interruptible: true
  image: python:3.9
  stage: check
  needs: []
  script:
    - pip install --no-cache-dir 'flake8>=3.8.4' 'flake8-bugbear~=21.4.3' 'black==21.5b2' 'isort~=5.9.3'
    - flake8 xotl/tools
    - black --check xotl/tools
    - isort --check --diff xotl/tools
  only:
    <<: *when-merge-requests-or-stable

.run_tox_staticcheck: &run_tox_staticcheck
  interruptible: true
  image: python:$PYTHON
  stage: mypy
  cache:
    key: $CI_JOB_NAME-$PYTHON
    paths:
      - .tox/
      - .mypy_cache/
  script:
    - pip install tox
    - |
      if [ -n "$TOX_POSARGS" ]; then
        tox -e system-staticcheck -- $TOX_POSARGS
      else
        tox -e system-staticcheck
      fi

.run_tox_tests: &run_tox_tests
  interruptible: true
  image: python:$PYTHON
  stage: test
  cache:
    key: $CI_JOB_NAME-$PYTHON
    paths:
      - .tox/
  script:
    - pip install tox
    - tox -e system-$GREENLETS

run required static checks:
  <<: *run_tox_staticcheck
  only:
    <<: *when-merge-requests-or-stable
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8", "3.9"]
        TOX_POSARGS: ["tests/test_dim.py"]

run static checks:
  <<: *run_tox_staticcheck
  only:
    <<: *when-merge-requests-or-stable
  allow_failure: true
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8", "3.9", "3.10"]


tests:
  <<: *run_tox_tests
  only:
    <<: *when-merge-requests-or-stable
  needs:
    - run required static checks
  parallel:
    matrix:
      - PYTHON: ["3.7", "3.8", "3.9", "3.10"]
        GREENLETS: ["unit", "greenlets"]


.x-when-releasing: &when-releasing
  refs:
    - tags
  variables:
    - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+)?$/
    - $CI_SERVER_HOST == "gitlab.merchise.org"


.x-when-prereleasing: &when-prereleasing
  refs:
    - tags
  variables:
    - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+|\.dev\d+)?$/
    - $CI_SERVER_HOST == "gitlab.merchise.org"

build:
  image: python:3.8
  stage: build
  parallel:
    matrix:
      - DIST_CMD: [sdist, bdist_wheel]
  script:
    - apt-get update && apt-get install -y git
    - python setup.py $DIST_CMD
  artifacts:
    paths:
      - dist/
  only:
    <<: *when-prereleasing


check signature of tag:
  interruptible: true
  image: alpine
  stage: check
  script:
    - apk add gnupg git
    - cat $GNUPG_KEY_FILE | gpg --import
    - git verify-tag $CI_COMMIT_REF_NAME
  only:
    <<: *when-prereleasing

publish in pypi:
  image: python:3.8
  variables:
    GIT_STRATEGY: none
  stage: publish
  script:
    - pip install twine
    - twine upload --skip-existing -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  needs:
    - check signature of tag
    - build
  environment:
    name: pypi
    url: https://pypi.org/project/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME
  only:
    <<: *when-releasing


.build_doc: &build_doc
  image: python:3.8
  stage: build
  cache:
    key: docs-${CI_COMMIT_REF_SLUG}
    paths:
      - docs/builds/
  script:
    - apt-get update && apt-get install -y git make
    - pip install -e ".[docs]"
    - make -C docs/ html
    - mkdir -p public
    - cp -r docs/build/html/* public/
  artifacts:
    paths:
      - docs/build/html
      - public/
    expire_in: 4 days
  needs: []

build documentation for releases:
  <<: *build_doc
  only:
    <<: *when-prereleasing

build documentation:
  <<: *build_doc
  only:
    <<: *when-merge-requests-or-stable
  variables:
    SPHINXOPTS: "-W"
  interruptible: true

.publish_rtd: &publish_rtd
  image: alpine
  variables:
    GIT_STRATEGY: none
  stage: publish
  script:
    - |
      apk add openssh rsync
      mkdir -p $HOME/.ssh
      chmod 700 $HOME/.ssh
      cp $RSA_KEY_FILE $HOME/.ssh/id_rsa
      chmod 600 $HOME/.ssh/id_rsa
      cp $SSH_CONFIG_FILE $HOME/.ssh/config
      ssh docs.lahavane.com mkdir -p /data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA
      rsync -auvp -e ssh ./docs/build/html/ docs.lahavane.com:/data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA/
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; rm -r $CI_COMMIT_REF_NAME; ln -s .$CI_COMMIT_SHA $CI_COMMIT_REF_NAME"
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; ls -al | grep -oE '\.([0-9]|[a-z])*$' | sort | uniq -c | grep '1 ' | grep -oE '\.([0-9]|[a-z])*$' | xargs rm -rf"
  environment:
    name: docs.lahavane.com
    url: https://docs.lahavane.com/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME

publish in our RTD for releases:
  <<: *publish_rtd
  needs:
    - build documentation for releases
  only:
    <<: *when-releasing

pages:
  <<: *build_doc
  only:
    - releases-2.2.x

publish in our RTD:
  <<: *publish_rtd
  only:
    <<: *when-merge-requests-or-stable
    variables:
      - $CI_SERVER_HOST == "gitlab.merchise.org"
  needs:
    - build documentation

automatically remove MR documentation from our RTD server after 4 hours:
  stage: clean up
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /releases-/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_SERVER_HOST == "gitlab.merchise.org"'
      when: on_success
    - when: never
  trigger:
    include: ci/cleanup.yml
